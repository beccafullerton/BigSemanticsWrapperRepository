//
// Author.cs
// s.im.pl serialization
//
// Generated by MetaMetadataDotNetTranslator.
// Copyright 2014 Interface Ecology Lab. 
//


using Ecologylab.BigSemantics.Generated.Library.CreativeWorkNS;
using Ecologylab.BigSemantics.Generated.Library.PersonNS;
using Ecologylab.BigSemantics.MetaMetadataNS;
using Ecologylab.BigSemantics.MetadataNS;
using Ecologylab.BigSemantics.MetadataNS.Builtins;
using Ecologylab.BigSemantics.MetadataNS.Scalar;
using Ecologylab.Collections;
using Simpl.Fundamental.Generic;
using Simpl.Serialization;
using Simpl.Serialization.Attributes;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Ecologylab.BigSemantics.Generated.Library.Person.AuthorNS 
{
	/// <summary>
	/// An author of an article or creative work.
	/// </summary>
	[SimplInherit]
	public class Author : Person
	{
		[SimplScalar]
		private MetadataString affiliation;

		[SimplScalar]
		private MetadataString city;

		[SimplCollection("creative_work")]
		[MmName("creative_works")]
		private List<CreativeWork> creativeWorks;

		[SimplComposite]
		[SimplWrap]
		[SimplScope("repository_documents")]
		[MmName("webpage")]
		private Document webpage;

		[SimplComposite]
		[MmName("twitter_profile")]
		private RichDocument twitterProfile;

		public Author()
		{ }

		public Author(MetaMetadataCompositeField mmd) : base(mmd) { }


		public MetadataString Affiliation
		{
			get{return affiliation;}
			set
			{
				if (this.affiliation != value)
				{
					this.affiliation = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public MetadataString City
		{
			get{return city;}
			set
			{
				if (this.city != value)
				{
					this.city = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public List<CreativeWork> CreativeWorks
		{
			get{return creativeWorks;}
			set
			{
				if (this.creativeWorks != value)
				{
					this.creativeWorks = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public Document Webpage
		{
			get{return webpage;}
			set
			{
				if (this.webpage != value)
				{
					this.webpage = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public RichDocument TwitterProfile
		{
			get{return twitterProfile;}
			set
			{
				if (this.twitterProfile != value)
				{
					this.twitterProfile = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}
	}
}
