//
// Search.cs
// s.im.pl serialization
//
// Generated by MetaMetadataDotNetTranslator.
// Copyright 2014 Interface Ecology Lab. 
//


using Ecologylab.Collections;
using Ecologylab.Semantics.Generated.Library.SearchNS;
using Ecologylab.Semantics.MetaMetadataNS;
using Ecologylab.Semantics.MetadataNS;
using Ecologylab.Semantics.MetadataNS.Builtins;
using Simpl.Fundamental.Generic;
using Simpl.Serialization;
using Simpl.Serialization.Attributes;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Ecologylab.Semantics.Generated.Library.SearchNS 
{
	/// <summary>
	/// A search.
	/// </summary>
	[SimplInherit]
	public class Search<SR> : RichDocument where SR : RichDocument
	{
		[SimplCollection]
		[SimplNoWrap]
		[SimplScope("repository_documents")]
		[MmName("search_results")]
		private List<RichDocument> searchResults;

		[SimplCollection("search")]
		[MmName("related_searches")]
		private List<Search<RichDocument>> relatedSearches;

		[SimplComposite]
		[MmName("next_page")]
		private Search<RichDocument> nextPage;

		public Search()
		{ }

		public Search(MetaMetadataCompositeField mmd) : base(mmd) { }


		public List<RichDocument> SearchResults
		{
			get{return searchResults;}
			set
			{
				if (this.searchResults != value)
				{
					this.searchResults = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public List<Search<RichDocument>> RelatedSearches
		{
			get{return relatedSearches;}
			set
			{
				if (this.relatedSearches != value)
				{
					this.relatedSearches = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public Search<RichDocument> NextPage
		{
			get{return nextPage;}
			set
			{
				if (this.nextPage != value)
				{
					this.nextPage = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}
	}
}
