//
// BoardGame.cs
// s.im.pl serialization
//
// Generated by MetaMetadataDotNetTranslator.
// Copyright 2014 Interface Ecology Lab. 
//


using Ecologylab.Collections;
using Ecologylab.Semantics.Generated.Library.BoardGameNS;
using Ecologylab.Semantics.Generated.Library.CreativeWorkNS;
using Ecologylab.Semantics.MetaMetadataNS;
using Ecologylab.Semantics.MetadataNS;
using Ecologylab.Semantics.MetadataNS.Builtins;
using Ecologylab.Semantics.MetadataNS.Scalar;
using Simpl.Fundamental.Generic;
using Simpl.Serialization;
using Simpl.Serialization.Attributes;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Ecologylab.Semantics.Generated.Library.BoardGameNS 
{
	/// <summary>
	/// The board game info class
	/// </summary>
	[SimplInherit]
	public class BoardGame : CreativeWork
	{
		[SimplScalar]
		private MetadataString numberOfPlayers;

		[SimplScalar]
		private MetadataString numberOfRatings;

		[SimplCollection("board_game")]
		[MmName("similar_games")]
		private List<BoardGame> similarGames;

		[SimplCollection("compound_document")]
		[MmName("categories")]
		private List<CompoundDocument> categories;

		public BoardGame()
		{ }

		public BoardGame(MetaMetadataCompositeField mmd) : base(mmd) { }


		public MetadataString NumberOfPlayers
		{
			get{return numberOfPlayers;}
			set
			{
				if (this.numberOfPlayers != value)
				{
					this.numberOfPlayers = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public MetadataString NumberOfRatings
		{
			get{return numberOfRatings;}
			set
			{
				if (this.numberOfRatings != value)
				{
					this.numberOfRatings = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public List<BoardGame> SimilarGames
		{
			get{return similarGames;}
			set
			{
				if (this.similarGames != value)
				{
					this.similarGames = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public List<CompoundDocument> Categories
		{
			get{return categories;}
			set
			{
				if (this.categories != value)
				{
					this.categories = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}
	}
}
