package ecologylab.bigsemantics.generated.library.wikipediaPageType;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2014) Interface Ecology Lab.
 */

import ecologylab.bigsemantics.generated.library.wikipediaPageType.WikipediaCategoryType;
import ecologylab.bigsemantics.generated.library.wikipediaPageType.WikipediaPageType;
import ecologylab.bigsemantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.bigsemantics.metadata.builtins.RichDocument;
import ecologylab.bigsemantics.metadata.mm_name;
import ecologylab.bigsemantics.metadata.scalar.MetadataParsedURL;
import ecologylab.bigsemantics.metametadata.MetaMetadataCompositeField;
import ecologylab.bigsemantics.namesandnums.SemanticsNames;
import ecologylab.net.ParsedURL;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_inherit;
import ecologylab.serialization.annotations.simpl_scalar;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@simpl_inherit
public class WikipediaCategoryType extends RichDocument
{
	@simpl_collection("wikipedia_category_type")
	@mm_name("subcategories")
	private List<WikipediaCategoryType> subcategories;

	@simpl_collection("wikipedia_page_type")
	@mm_name("articles")
	private List<WikipediaPageType> articles;

	@simpl_scalar
	private MetadataParsedURL nextPageUrl;

	@simpl_collection("wikipedia_category_type")
	@mm_name("supercategories")
	private List<WikipediaCategoryType> supercategories;

	public WikipediaCategoryType()
	{ super(); }

	public WikipediaCategoryType(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public List<WikipediaCategoryType> getSubcategories()
	{
		return subcategories;
	}

  // lazy evaluation:
  public List<WikipediaCategoryType> subcategories()
  {
    if (subcategories == null)
      subcategories = new ArrayList<WikipediaCategoryType>();
    return subcategories;
  }

  // addTo:
  public void addToSubcategories(WikipediaCategoryType element)
  {
    subcategories().add(element);
  }

  // size:
  public int subcategoriesSize()
  {
    return subcategories == null ? 0 : subcategories.size();
  }

	public void setSubcategories(List<WikipediaCategoryType> subcategories)
	{
		this.subcategories = subcategories;
	}

	public List<WikipediaPageType> getArticles()
	{
		return articles;
	}

  // lazy evaluation:
  public List<WikipediaPageType> articles()
  {
    if (articles == null)
      articles = new ArrayList<WikipediaPageType>();
    return articles;
  }

  // addTo:
  public void addToArticles(WikipediaPageType element)
  {
    articles().add(element);
  }

  // size:
  public int articlesSize()
  {
    return articles == null ? 0 : articles.size();
  }

	public void setArticles(List<WikipediaPageType> articles)
	{
		this.articles = articles;
	}

	public MetadataParsedURL	nextPageUrl()
	{
		MetadataParsedURL	result = this.nextPageUrl;
		if (result == null)
		{
			result = new MetadataParsedURL();
			this.nextPageUrl = result;
		}
		return result;
	}

	public ParsedURL getNextPageUrl()
	{
		return this.nextPageUrl == null ? null : nextPageUrl().getValue();
	}

	public MetadataParsedURL getNextPageUrlMetadata()
	{
		return nextPageUrl;
	}

	public void setNextPageUrl(ParsedURL nextPageUrl)
	{
		if (nextPageUrl != null)
			this.nextPageUrl().setValue(nextPageUrl);
	}

	public void setNextPageUrlMetadata(MetadataParsedURL nextPageUrl)
	{
		this.nextPageUrl = nextPageUrl;
	}

	public List<WikipediaCategoryType> getSupercategories()
	{
		return supercategories;
	}

  // lazy evaluation:
  public List<WikipediaCategoryType> supercategories()
  {
    if (supercategories == null)
      supercategories = new ArrayList<WikipediaCategoryType>();
    return supercategories;
  }

  // addTo:
  public void addToSupercategories(WikipediaCategoryType element)
  {
    supercategories().add(element);
  }

  // size:
  public int supercategoriesSize()
  {
    return supercategories == null ? 0 : supercategories.size();
  }

	public void setSupercategories(List<WikipediaCategoryType> supercategories)
	{
		this.supercategories = supercategories;
	}
}
