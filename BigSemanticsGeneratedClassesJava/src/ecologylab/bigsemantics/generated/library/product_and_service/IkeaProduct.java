package ecologylab.bigsemantics.generated.library.product_and_service;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2014) Interface Ecology Lab.
 */

import ecologylab.bigsemantics.generated.library.product_and_service.IkeaDepartment;
import ecologylab.bigsemantics.generated.library.product_and_service.IkeaProduct;
import ecologylab.bigsemantics.generated.library.product_and_service.Product;
import ecologylab.bigsemantics.generated.library.product_and_service.Specification;
import ecologylab.bigsemantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.bigsemantics.metadata.mm_name;
import ecologylab.bigsemantics.metadata.scalar.MetadataString;
import ecologylab.bigsemantics.metametadata.MetaMetadataCompositeField;
import ecologylab.bigsemantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_inherit;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@simpl_inherit
public class IkeaProduct extends Product
{
	@simpl_collection("specification")
	@mm_name("dimensions")
	private List<Specification> dimensions;

	@simpl_collection("ikea_product")
	@mm_name("more_models")
	private List<IkeaProduct> moreModels;

	@simpl_collection("ikea_product")
	@mm_name("coordinating_products")
	private List<IkeaProduct> coordinatingProducts;

	@simpl_collection("details2")
	@mm_name("details2")
	private List<MetadataString> details2;

	@simpl_collection("ikea_department")
	@mm_name("departments")
	private List<IkeaDepartment> departments;

	public IkeaProduct()
	{ super(); }

	public IkeaProduct(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public List<Specification> getDimensions()
	{
		return dimensions;
	}

  // lazy evaluation:
  public List<Specification> dimensions()
  {
    if (dimensions == null)
      dimensions = new ArrayList<Specification>();
    return dimensions;
  }

  // addTo:
  public void addToDimensions(Specification element)
  {
    dimensions().add(element);
  }

  // size:
  public int dimensionsSize()
  {
    return dimensions == null ? 0 : dimensions.size();
  }

	public void setDimensions(List<Specification> dimensions)
	{
		this.dimensions = dimensions;
	}

	public List<IkeaProduct> getMoreModels()
	{
		return moreModels;
	}

  // lazy evaluation:
  public List<IkeaProduct> moreModels()
  {
    if (moreModels == null)
      moreModels = new ArrayList<IkeaProduct>();
    return moreModels;
  }

  // addTo:
  public void addToMoreModels(IkeaProduct element)
  {
    moreModels().add(element);
  }

  // size:
  public int moreModelsSize()
  {
    return moreModels == null ? 0 : moreModels.size();
  }

	public void setMoreModels(List<IkeaProduct> moreModels)
	{
		this.moreModels = moreModels;
	}

	public List<IkeaProduct> getCoordinatingProducts()
	{
		return coordinatingProducts;
	}

  // lazy evaluation:
  public List<IkeaProduct> coordinatingProducts()
  {
    if (coordinatingProducts == null)
      coordinatingProducts = new ArrayList<IkeaProduct>();
    return coordinatingProducts;
  }

  // addTo:
  public void addToCoordinatingProducts(IkeaProduct element)
  {
    coordinatingProducts().add(element);
  }

  // size:
  public int coordinatingProductsSize()
  {
    return coordinatingProducts == null ? 0 : coordinatingProducts.size();
  }

	public void setCoordinatingProducts(List<IkeaProduct> coordinatingProducts)
	{
		this.coordinatingProducts = coordinatingProducts;
	}

	public List<MetadataString> getDetails2()
	{
		return details2;
	}

  // lazy evaluation:
  public List<MetadataString> details2()
  {
    if (details2 == null)
      details2 = new ArrayList<MetadataString>();
    return details2;
  }

  // addTo:
  public void addToDetails2(MetadataString element)
  {
    details2().add(element);
  }

  // size:
  public int details2Size()
  {
    return details2 == null ? 0 : details2.size();
  }

	public void setDetails2(List<MetadataString> details2)
	{
		this.details2 = details2;
	}

	public List<IkeaDepartment> getDepartments()
	{
		return departments;
	}

  // lazy evaluation:
  public List<IkeaDepartment> departments()
  {
    if (departments == null)
      departments = new ArrayList<IkeaDepartment>();
    return departments;
  }

  // addTo:
  public void addToDepartments(IkeaDepartment element)
  {
    departments().add(element);
  }

  // size:
  public int departmentsSize()
  {
    return departments == null ? 0 : departments.size();
  }

	public void setDepartments(List<IkeaDepartment> departments)
	{
		this.departments = departments;
	}
}
