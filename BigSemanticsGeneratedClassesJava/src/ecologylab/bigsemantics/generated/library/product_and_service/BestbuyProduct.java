package ecologylab.bigsemantics.generated.library.product_and_service;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2014) Interface Ecology Lab.
 */

import ecologylab.bigsemantics.generated.library.product_and_service.BestbuyProduct;
import ecologylab.bigsemantics.generated.library.product_and_service.Product;
import ecologylab.bigsemantics.metadata.builtins.CompoundDocument;
import ecologylab.bigsemantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.bigsemantics.metadata.mm_name;
import ecologylab.bigsemantics.metametadata.MetaMetadataCompositeField;
import ecologylab.bigsemantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_inherit;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@simpl_inherit
public class BestbuyProduct extends Product
{
	@simpl_collection("compound_document")
	@mm_name("features")
	private List<CompoundDocument> features;

	@simpl_collection("compound_document")
	@mm_name("whats_included")
	private List<CompoundDocument> whatsIncluded;

	@simpl_collection("compound_document")
	@mm_name("specifications")
	private List<CompoundDocument> specifications;

	@simpl_collection("bestbuy_product")
	@mm_name("companion_products")
	private List<BestbuyProduct> companionProducts;

	@simpl_collection("bestbuy_product")
	@mm_name("comparative_products")
	private List<BestbuyProduct> comparativeProducts;

	public BestbuyProduct()
	{ super(); }

	public BestbuyProduct(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public List<CompoundDocument> getFeatures()
	{
		return features;
	}

  // lazy evaluation:
  public List<CompoundDocument> features()
  {
    if (features == null)
      features = new ArrayList<CompoundDocument>();
    return features;
  }

  // addTo:
  public void addToFeatures(CompoundDocument element)
  {
    features().add(element);
  }

  // size:
  public int featuresSize()
  {
    return features == null ? 0 : features.size();
  }

	public void setFeatures(List<CompoundDocument> features)
	{
		this.features = features;
	}

	public List<CompoundDocument> getWhatsIncluded()
	{
		return whatsIncluded;
	}

  // lazy evaluation:
  public List<CompoundDocument> whatsIncluded()
  {
    if (whatsIncluded == null)
      whatsIncluded = new ArrayList<CompoundDocument>();
    return whatsIncluded;
  }

  // addTo:
  public void addToWhatsIncluded(CompoundDocument element)
  {
    whatsIncluded().add(element);
  }

  // size:
  public int whatsIncludedSize()
  {
    return whatsIncluded == null ? 0 : whatsIncluded.size();
  }

	public void setWhatsIncluded(List<CompoundDocument> whatsIncluded)
	{
		this.whatsIncluded = whatsIncluded;
	}

	public List<CompoundDocument> getSpecifications()
	{
		return specifications;
	}

  // lazy evaluation:
  public List<CompoundDocument> specifications()
  {
    if (specifications == null)
      specifications = new ArrayList<CompoundDocument>();
    return specifications;
  }

  // addTo:
  public void addToSpecifications(CompoundDocument element)
  {
    specifications().add(element);
  }

  // size:
  public int specificationsSize()
  {
    return specifications == null ? 0 : specifications.size();
  }

	public void setSpecifications(List<CompoundDocument> specifications)
	{
		this.specifications = specifications;
	}

	public List<BestbuyProduct> getCompanionProducts()
	{
		return companionProducts;
	}

  // lazy evaluation:
  public List<BestbuyProduct> companionProducts()
  {
    if (companionProducts == null)
      companionProducts = new ArrayList<BestbuyProduct>();
    return companionProducts;
  }

  // addTo:
  public void addToCompanionProducts(BestbuyProduct element)
  {
    companionProducts().add(element);
  }

  // size:
  public int companionProductsSize()
  {
    return companionProducts == null ? 0 : companionProducts.size();
  }

	public void setCompanionProducts(List<BestbuyProduct> companionProducts)
	{
		this.companionProducts = companionProducts;
	}

	public List<BestbuyProduct> getComparativeProducts()
	{
		return comparativeProducts;
	}

  // lazy evaluation:
  public List<BestbuyProduct> comparativeProducts()
  {
    if (comparativeProducts == null)
      comparativeProducts = new ArrayList<BestbuyProduct>();
    return comparativeProducts;
  }

  // addTo:
  public void addToComparativeProducts(BestbuyProduct element)
  {
    comparativeProducts().add(element);
  }

  // size:
  public int comparativeProductsSize()
  {
    return comparativeProducts == null ? 0 : comparativeProducts.size();
  }

	public void setComparativeProducts(List<BestbuyProduct> comparativeProducts)
	{
		this.comparativeProducts = comparativeProducts;
	}
}
