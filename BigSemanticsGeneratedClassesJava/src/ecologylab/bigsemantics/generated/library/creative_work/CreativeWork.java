package ecologylab.bigsemantics.generated.library.creative_work;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2014) Interface Ecology Lab.
 */

import ecologylab.bigsemantics.generated.library.author.Author;
import ecologylab.bigsemantics.generated.library.creative_work.CreativeWork;
import ecologylab.bigsemantics.generated.library.rating.Rating;
import ecologylab.bigsemantics.metadata.builtins.Document;
import ecologylab.bigsemantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.bigsemantics.metadata.builtins.RichDocument;
import ecologylab.bigsemantics.metadata.mm_name;
import ecologylab.bigsemantics.metadata.scalar.MetadataString;
import ecologylab.bigsemantics.metametadata.MetaMetadataCompositeField;
import ecologylab.bigsemantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_composite;
import ecologylab.serialization.annotations.simpl_inherit;
import ecologylab.serialization.annotations.simpl_other_tags;
import ecologylab.serialization.annotations.simpl_scalar;
import ecologylab.serialization.annotations.simpl_scope;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@simpl_inherit
public class CreativeWork extends RichDocument
{
	@simpl_collection("author")
	@mm_name("authors")
	private List<Author> authors;

	@simpl_scalar
	@simpl_other_tags({"year_of_publication"})
	private MetadataString year;

	/** 
	 *rating in some context
	 */ 
	@simpl_scalar
	private MetadataString overallRating;

	@simpl_composite
	@mm_name("rating")
	private Rating rating;

	/** 
	 *Documents that are cited by this work.
	 */ 
	@simpl_collection
	@simpl_scope("repository_documents")
	@mm_name("references")
	private List<Document> references;

	/** 
	 *Creatives that cite this work.
	 */ 
	@simpl_collection
	@simpl_scope("repository_documents")
	@mm_name("citations")
	private List<CreativeWork> citations;

	@simpl_composite
	@mm_name("rich_media")
	private RichDocument richMedia;

	public CreativeWork()
	{ super(); }

	public CreativeWork(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public List<Author> getAuthors()
	{
		return authors;
	}

  // lazy evaluation:
  public List<Author> authors()
  {
    if (authors == null)
      authors = new ArrayList<Author>();
    return authors;
  }

  // addTo:
  public void addToAuthors(Author element)
  {
    authors().add(element);
  }

  // size:
  public int authorsSize()
  {
    return authors == null ? 0 : authors.size();
  }

	public void setAuthors(List<Author> authors)
	{
		this.authors = authors;
	}

	public MetadataString	year()
	{
		MetadataString	result = this.year;
		if (result == null)
		{
			result = new MetadataString();
			this.year = result;
		}
		return result;
	}

	public String getYear()
	{
		return this.year == null ? null : year().getValue();
	}

	public MetadataString getYearMetadata()
	{
		return year;
	}

	public void setYear(String year)
	{
		if (year != null)
			this.year().setValue(year);
	}

	public void setYearMetadata(MetadataString year)
	{
		this.year = year;
	}

	public MetadataString	overallRating()
	{
		MetadataString	result = this.overallRating;
		if (result == null)
		{
			result = new MetadataString();
			this.overallRating = result;
		}
		return result;
	}

	public String getOverallRating()
	{
		return this.overallRating == null ? null : overallRating().getValue();
	}

	public MetadataString getOverallRatingMetadata()
	{
		return overallRating;
	}

	public void setOverallRating(String overallRating)
	{
		if (overallRating != null)
			this.overallRating().setValue(overallRating);
	}

	public void setOverallRatingMetadata(MetadataString overallRating)
	{
		this.overallRating = overallRating;
	}

	public Rating getRating()
	{
		return rating;
	}

	public void setRating(Rating rating)
	{
		this.rating = rating;
	}

	public List<Document> getReferences()
	{
		return references;
	}

  // lazy evaluation:
  public List<Document> references()
  {
    if (references == null)
      references = new ArrayList<Document>();
    return references;
  }

  // addTo:
  public void addToReferences(Document element)
  {
    references().add(element);
  }

  // size:
  public int referencesSize()
  {
    return references == null ? 0 : references.size();
  }

	public void setReferences(List<Document> references)
	{
		this.references = references;
	}

	public List<CreativeWork> getCitations()
	{
		return citations;
	}

  // lazy evaluation:
  public List<CreativeWork> citations()
  {
    if (citations == null)
      citations = new ArrayList<CreativeWork>();
    return citations;
  }

  // addTo:
  public void addToCitations(CreativeWork element)
  {
    citations().add(element);
  }

  // size:
  public int citationsSize()
  {
    return citations == null ? 0 : citations.size();
  }

	public void setCitations(List<CreativeWork> citations)
	{
		this.citations = citations;
	}

	public RichDocument getRichMedia()
	{
		return richMedia;
	}

	public void setRichMedia(RichDocument richMedia)
	{
		this.richMedia = richMedia;
	}
}
