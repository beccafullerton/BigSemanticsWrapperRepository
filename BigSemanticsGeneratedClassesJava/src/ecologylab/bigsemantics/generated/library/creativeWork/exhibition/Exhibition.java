package ecologylab.bigsemantics.generated.library.creativeWork.exhibition;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2014) Interface Ecology Lab.
 */

import ecologylab.bigsemantics.generated.library.creativeWork.CreativeWork;
import ecologylab.bigsemantics.generated.library.creativeWork.artwork.Artwork;
import ecologylab.bigsemantics.generated.library.person.author.Artist;
import ecologylab.bigsemantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.bigsemantics.metadata.mm_name;
import ecologylab.bigsemantics.metametadata.MetaMetadataCompositeField;
import ecologylab.bigsemantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_inherit;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/** 
 *Artwork exhibition class
 */ 
@simpl_inherit
public class Exhibition extends CreativeWork
{
	/** 
	 *Set of contributors.
	 */ 
	@simpl_collection("artist")
	@mm_name("contributors")
	private List<Artist> contributors;

	@simpl_collection("artwork")
	@mm_name("creative_works")
	private List<Artwork> creativeWorks;

	public Exhibition()
	{ super(); }

	public Exhibition(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public List<Artist> getContributors()
	{
		return contributors;
	}

  // lazy evaluation:
  public List<Artist> contributors()
  {
    if (contributors == null)
      contributors = new ArrayList<Artist>();
    return contributors;
  }

  // addTo:
  public void addToContributors(Artist element)
  {
    contributors().add(element);
  }

  // size:
  public int contributorsSize()
  {
    return contributors == null ? 0 : contributors.size();
  }

	public void setContributors(List<Artist> contributors)
	{
		this.contributors = contributors;
	}

	public List<Artwork> getCreativeWorks()
	{
		return creativeWorks;
	}

  // lazy evaluation:
  public List<Artwork> creativeWorks()
  {
    if (creativeWorks == null)
      creativeWorks = new ArrayList<Artwork>();
    return creativeWorks;
  }

  // addTo:
  public void addToCreativeWorks(Artwork element)
  {
    creativeWorks().add(element);
  }

  // size:
  public int creativeWorksSize()
  {
    return creativeWorks == null ? 0 : creativeWorks.size();
  }

	public void setCreativeWorks(List<Artwork> creativeWorks)
	{
		this.creativeWorks = creativeWorks;
	}
}
